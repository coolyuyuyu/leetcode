class DisjointSets {
public:
    DisjointSets(int n)
        : m_parents(n)
        , m_cardinality(n, 1)
        , m_size(n) {
        std::iota(m_parents.begin(), m_parents.end(), 0);
    }

    void merge(int elem1, int elem2) {
        int root1 = root(elem1), root2 = root(elem2);
        if (root1 != root2) {
            m_parents[root1] = root2;
            m_cardinality[root2] += m_cardinality[root1];
            --m_size;
        }
    }

    bool connected(int elem1, int elem2) const {
        return root(elem1) == root(elem2);
    }

    int cardinality(int elem) const {
        return m_cardinality[root(elem)];
    }

    int size() const {
        return m_size;
    }

    int root(int elem) const {
        if (m_parents[elem] != elem) {
            m_parents[elem] = root(m_parents[elem]);
        }

        return m_parents[elem];
    }

private:
    mutable vector<int> m_parents;
    vector<int> m_cardinality;
    int m_size;
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();

        DisjointSets ds(n);
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (graph[i][j]) {
                    ds.merge(i, j);
                }
            }
        }

        unordered_map<int, vector<int>> root2srcs;
        for (int src : initial) {
            root2srcs[ds.root(src)].push_back(src);
        }

        int ret = -1, size = 0;
        for (const auto& [root, srcs] : root2srcs) {
            if (srcs.size() == 1) {
                int s = ds.cardinality(root);
                if (s > size) {
                    size = s;
                    ret = srcs[0];
                }
                else if (s == size && srcs[0] < ret) {
                    ret = srcs[0];
                }
            }
        }

        if (ret == -1) {
            return *std::min_element(initial.begin(), initial.end());
        }

        return ret;
    }
};
